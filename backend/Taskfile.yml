version: '3'

tasks:
  clean:
    desc: "Clean backend build artifacts"
    cmds:
      - rm -rf __pycache__
      - rm -rf .mypy_cache
      - rm -rf .pytest_cache

  init:
    desc: "Initialize backend project"
    cmds:
      - poetry install
      - task: create-env-file

  run:
    desc: "Run the backend server"
    cmds:
      - "PYTHONPATH=./src poetry run python src/main.py"

  test:
    desc: "Run tests with unittest"
    cmds:
      - "PYTHONPATH=./src poetry run python -m unittest discover -s tests "

  test-coverage:
    desc: "Run tests with coverage reporting"
    cmds:
      - PYTHONPATH=src poetry run coverage run -m unittest discover -s tests
      - PYTHONPATH=src poetry run coverage html
      - poetry run coverage report

  check:
    desc: "Run all checks"
    cmds:
      - task: lint
      - task: format
      - task: test
      - task: test-coverage

  build:
    desc: "Build the backend project"
    cmds:
      - task: check
      - poetry build
      - poetry install --no-deps --no-root
      - poetry install --no-root


  prisma-create-migration:
    desc: "Create a new Prisma migration, please provide name=<migration-name>"
    cmds:
      - poetry run prisma migrate dev --name {{.name}}

  prisma-generate:
    desc: "Generate Prisma client"
    cmds:
      - poetry run prisma generate --no-hints

  prisma-seed:
    desc: "Seed the database"
    cmds:
      - poetry run prisma db seed

  prisma-deploy:
    desc: "Deploy Prisma migrations"
    cmds:
      - poetry run prisma migrate deploy

  lint:
    desc: "Run linters for code quality"
    cmds:
      - poetry run flake8 --config=.flake8
      - poetry run black --check . --config pyproject.toml

  format:
    desc: "Format the codebase"
    cmds:
      - poetry run black src tests --config pyproject.toml

  migrate:
    desc: "Apply Prisma migrations"
    cmds:
      - poetry run prisma migrate deploy

  create-env-file:
    desc: "Create the .env file if it does not exist"
    cmds:
      - |
        if [ ! -f .env ]; then
          echo "DATABASE_URL=\"mysql://{{.MYSQL_USER}}:{{.MYSQL_PASSWORD}}@127.0.0.1:{{.MYSQL_PORT}}/{{.MYSQL_DATABASE}}\"" >> .env
          echo "Please set your OPENAI_API_KEY in the .env file"
        fi
    status:
      - test -f .env
