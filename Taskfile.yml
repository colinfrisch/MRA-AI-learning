version: '3'

vars:
  MYSQL_PORT: "3306"
  MYSQL_USER: "local_user"
  MYSQL_PASSWORD: "local_password"
  MYSQL_DATABASE: "mra_db"
  MYSQL_CONTAINER: "mra_db"
tasks:
  clean:
    desc: "Remove generated files but keep poetry.lock"
    cmds:
      - rm -fr .venv

  init:
    desc: "Setup project with Poetry, Prisma, and MySQL"
    cmds:
      - task: create-env-file
      - poetry install
      - task: prisma-generate
      - task: run-database
      - PYTHONPATH=src poetry run prisma migrate deploy

  run:
    desc: "Run the Streamlit app"
    cmds:
      - poetry run prisma migrate deploy
      - PYTHONPATH=src poetry run streamlit run src/front/main.py

  test:
    desc: "Run tests with unittest"
    cmds:
      - PYTHONPATH=src poetry run python -m unittest discover

  test-coverage:
    desc: "Run tests with coverage reporting"
    cmds:
      - PYTHONPATH=src poetry run coverage run -m unittest discover
      - poetry run coverage report

  run-database:
    desc: "Start MySQL database with Docker Compose"
    dir: ./compose
    cmds:
      - docker compose up -d --wait

  stop-database:
    desc: "Stop and remove MySQL database container"
    dir: ./compose
    cmds:
      - docker compose stop

  mysql-prompt:
    desc: "Open MySQL prompt inside Docker container"
    cmds:
      - docker exec -it {{.MYSQL_CONTAINER}} mysql -h127.0.0.1 -u{{.MYSQL_USER}} -p{{.MYSQL_PASSWORD}} {{.MYSQL_DATABASE}}

  create-env-file:
    desc: "Create the .env file if it does not exist"
    cmds:
      - |
        if [ ! -f .env ]; then
          cp .env.local .env
          echo "DATABASE_URL=\"mysql://{{.MYSQL_USER}}:{{.MYSQL_PASSWORD}}@127.0.0.1:{{.MYSQL_PORT}}/{{.MYSQL_DATABASE}}\"" >> .env
          echo "Please set your OPENAI_API_KEY in the .env file"
        fi
    status:
      - test -f .env

  prisma-create-migration:
    desc: "Create a new Prisma migration, please provide name=<migration-name>"
    cmds:
      - poetry run prisma migrate dev --name {{.name}}

  prisma-generate:
    desc: "Generate Prisma client"
    cmds:
      - poetry run prisma generate --no-hints

  prisma-seed:
    desc: "Seed the database"
    cmds:
      - poetry run prisma db seed

  prisma-deploy:
    desc: "Deploy Prisma migrations"
    cmds:
      - poetry run prisma migrate deploy

  lint:
    desc: "Lint the codebase"
    cmds:
      - poetry run flake8 src tests

  format:
    desc: "Format the codebase"
    cmds:
      - poetry run black src tests